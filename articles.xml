<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[WebComponents.org]]></title>
        <description><![CDATA[A place to discuss and evolve Web Component best-practices]]></description>
        <link>http://webcomponents.org</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 22 May 2015 14:40:17 GMT</lastBuildDate>
        <atom:link href="http://webcomponents.org/articles.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 22 May 2015 14:38:35 GMT</pubDate>
        <item>
            <title><![CDATA[Why Web Components?]]></title>
            <description><![CDATA[<p>By now, you may have heard a lot of things about Web Components. Some people say it&#39;s the promise land, others say it has been oversold.</p>
<p>Although they&#39;re not going to solve all your life&#39;s problems, they do provide a paradigm shift from the traditional approach of web development.</p>
<p>If you still aren&#39;t sure about what exactly is Web Components or even why you should care about it, this article is for you.</p>
<!-- Excerpt -->
<h3 id="why-">Why?</h3>
<p>At the start of the web we had a small set of tags. We had <code>&lt;form&gt;</code>, we had <code>&lt;select&gt;</code> - you would build your pages out of these tags and they had meaning. They had encapsulation, they had default UI, they would emit events when something interesting happened. Most of the time you just worked in markup.</p>
<p>The way we build pages on the web these days is a little different. We either copy &amp; paste chunks of HTML from CSS libraries like Bootstrap or litter our pages with all sorts of JavaScript frameworks and plugins. On top of that, reusing components from different frameworks in the same page isn&#39;t always possible. This means our pages end up with bloated CSS, bloated JavaScript or both.</p>
<p>What if HTML was expressive enough to allow us to extend HTML so we can fill in the gaps in functionality with our own tags? Well, Web Components enable that.</p>
<h3 id="how-">How?</h3>
<p>Specifically, Web Components are an umbrella term for four different W3C specifications:</p>
<ul>
<li><a href="/articles/introduction-to-custom-elements/">Custom Elements</a> lets you define your own HTML tags;</li>
<li><a href="/articles/introduction-to-template-element/">HTML Templates</a> enables you to define blocks of markup with the ability to inject dynamic content into;</li>
<li><a href="/articles/introduction-to-shadow-dom/">Shadow DOM</a> gives you the ability to scope markup and styles in a separate DOM tree;</li>
<li><a href="/articles/introduction-to-html-imports/">HTML Imports</a> provides a way to include and reuse HTML documents in other HTML documents.</li>
</ul>
<p>Each of these pieces is useful individually. But when combined, this whole package gives you:</p>
<ul>
<li><strong>Composability</strong> (being able to create whole sites and apps by putting different elements together);</li>
<li><strong>Encapsulation</strong> (isolating markup, style, and behavior logic so they don’t leak into the rest of the page);</li>
<li><strong>Reusability</strong> (extending existing elements to create new elements, allowing you to stop reinventing the wheel).</li>
</ul>
<p>That means we can finally fill any gaps in the platform in a meaningful way. Which also opens an opportunity for a less fragmented ecosystem, where components can truly interoperate with each other.</p>
<h3 id="more-">More?</h3>
<p>We hope this brief guide inspires you to learn more about Web Components and forth experimenting with your own custom elements.</p>
<p>If you want learn more you&#39;re in the right place, start taking a deep dive into our <a href="/tags/introduction">introductory articles</a> or check it out this <a href="https://www.youtube.com/watch?v=T5y_lmLngAk">overview video</a>.</p>
<p>&lt;have-fun&gt; :)</p>
]]></description>
            <link>http://webcomponents.org/articles/why-web-components</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/why-web-components</guid>
            <pubDate>Mon, 27 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Creating semantic sites with Web Components and JSON-LD]]></title>
            <description><![CDATA[<p>With the rising popularity of web components and supporting libraries like Polymer, custom elements become an attractive way to build UI features. The default encapsulation of custom elements makes them especially useful for creating independent widgets.</p>
<p>While some of the widgets are self-contained, many of them rely on external data to present the content to the user - e.g., the current forecast for a weather widget or the address of a company for a map widget.</p>
<p>It would be great if we could avoid repetition and ensure data consistency, by reusing the same data snippets to populate different widgets as well as inform search engines and other consumers about the content of our page. We can achieve this by using the <a href="http://schema.org/">schema.org</a> standard and the <a href="http://www.w3.org/TR/json-ld/">JSON-LD</a> format for our data.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/creating-semantic-sites-with-web-components-and-jsonld</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/creating-semantic-sites-with-web-components-and-jsonld</guid>
            <pubDate>Sun, 26 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Polymer 0.8 Released!]]></title>
            <description><![CDATA[<p>While evolving the “Developer Preview” of Polymer, we made the tough decision to do a significant internal redesign. This move enabled us to move away from experimentation towards production-readiness, and is a big step towards a 1.0.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/polymer-0-8-released</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/polymer-0-8-released</guid>
            <pubDate>Sat, 25 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Web Components, accessibility and the Priority of Constituencies]]></title>
            <description><![CDATA[<p>Gosh, what a snappy title. I’m not expecting a job offer from Buzzfeed any time soon.</p>
<p>Today, Apple sent their <a href="https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0225.html">consolidated feedback on Web Components</a> to the webapps Working Group. The TL;DR: they like the concept, are “considering significant implementation effort”, but want lots of changes first including <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=28547">removal of subclassing</a>, eg <code>&lt;button is=”my-button”&gt;</code>.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/web-components-accessibility-and-the-priority-of-constituencies</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/web-components-accessibility-and-the-priority-of-constituencies</guid>
            <pubDate>Fri, 24 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Web Components punch list]]></title>
            <description><![CDATA[<p>Considerations for web component and custom control design:</p>
<p>If your control has the stuff below covered, excellent! If not then please implement it before shouting to the world about it being the next big thing. Or at least document its deficits and provide a health warning that the control is incomplete and not fit to use in production.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/web-components-punch-list</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/web-components-punch-list</guid>
            <pubDate>Mon, 20 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why invest in Web Components?]]></title>
            <description><![CDATA[<p>If we could list a Top 10 Web Components&#39; Early Adopters, this guy would definitely be one of them. He&#39;s the founder of <a href="https://divshot.com/">Divshot</a>, a company that helps developers build better static web apps, and created several tools that you might heard already.</p>
<p>Ladies and gentlemen, let&#39;s continue our <a href="/tags/interview">interview series</a> with <a href="https://twitter.com/mbleigh">Michael Bleigh</a> sharing his motivations behind Web Components.</p>
<!-- Excerpt -->
<h3 id="your-company-launched-some-really-interesting-projects-around-web-components-what-motivates-you-to-invest-on-this-">Your company launched some really interesting projects around Web Components. What motivates you to invest on this?</h3>
<p>It&#39;s pretty simple, really. I&#39;m investing in Web Components because in two to three years every web application being built will be using them extensively. Web Components represent the most important advancement in browser technology since AJAX. I&#39;ve always been driven to make things that make web development better, and there&#39;s no better place to be doing that right now.</p>
<p>I started Divshot with the goal of building a platform for the front-end as sophisticated as the platforms we have for the back-end. Modern browsers are incredibly capable software platforms, and those small gaps that do exist are being plugged by Web Components (also Service Workers). If we invest in Web Components today, we&#39;ll have deeper and better knowledge of how to build our products for the future.</p>
<p>Most developers don&#39;t yet know what Web Components are, much less why they should care. It won&#39;t be long, however, until the first killer app for Web Components is going to ship. After that, it&#39;s all gravity. I&#39;m just be thrilled to play a part (however small or large) in the coming revolution.</p>
<h3 id="every-developer-has-their-own-workflow-to-compose-and-share-their-web-components-how-do-you-think-tools-like-ele-io-https-ele-io-can-improve-that-">Every developer has their own workflow to compose and share their Web Components. How do you think tools like <a href="https://ele.io/">ele.io</a> can improve that?</h3>
<p>Online tools are going to play a prominent role in a Web Components world. Ele is just one small expression of that. I love Web Components for what they offer me as a seasoned web developer, but the possibilities are mind-boggling if you think of the potential uses for less-experienced developers. A structured language like HTML is fundamentally easier to grasp to outsiders than learning to write JavaScript.</p>
<p>Today, you can sit down with a newcomer, the Bootstrap docs (or a tool like Divshot), and a couple of hours and you can show them how to piece together a non-interactive web page. With Web Components, that capability is orders of magnitude greater. We&#39;re already seeing how previously &quot;script-only&quot; things are becoming declarative thanks to Web Components (like <code>&lt;google-map&gt;</code> or <code>&lt;core-ajax&gt;</code>). I don&#39;t know where exactly the road leads, but tools built from the ground up for Web Components have the potential to do things that I could only dream about two years ago.</p>
<p>There&#39;s never going to be a one-size-fits all workflow for web development. That&#39;s why perhaps the greatest advantage Web Components offer is interoperability. One person can build something with X-Tag, another can build with Polymer, and amazingly those two elements can function well together! We&#39;re so accustomed to framework silos (jQuery plugins, Angular directives, etc. etc.) that it&#39;s almost hard to imagine a more compatible world.</p>
<h3 id="-built-with-polymer-http-builtwithpolymer-org-was-another-nice-initiative-to-highlight-the-community-s-work-is-there-anything-you-think-the-community-is-still-missing-that-could-help-it-grow-"><a href="http://builtwithpolymer.org/">Built with Polymer</a> was another nice initiative to highlight the community&#39;s work. Is there anything you think the community is still missing that could help it grow?</h3>
<p>There are two ways to grow the usage of any technology: top-down and bottom-up. I think there are big opportunities for both in the Web Components world.</p>
<p>The path to bottom-up adoption is already happening. All it takes is for people to build cool reusable custom elements that provide a better developer experience than anything available in existing frameworks and libraries. We don&#39;t have a sure-fire killer app just yet (though core and paper elements are really addictive), but I&#39;m convinced we&#39;ll get there soon. I&#39;d also like to see modern front-end libraries ship with an official Web Components option as part of the best practices for releasing something. It would be great to see jaw-dropping projects like Impulse get an &quot;official&quot; (or at least blessed) Web Components wrapper.</p>
<p>The top-down approach is also interesting. All it will take is for a major property like Facebook, Twitter, or YouTube to offer official custom elements as the primary way to embed their content and you&#39;ll see adoption skyrocket overnight. Imagine if putting a Like button on your website was done with an import link and an <code>&lt;fb-like&gt;</code> tag instead of the current hacked-together custom way. For that to happen, though, we&#39;re going to have to see browser support that gives the major players confidence to make that kind of move. It&#39;s probably at least a year or two out.</p>
<h3 id="you-created-one-of-the-first-web-components-meetups-http-www-meetup-com-web-components-la-in-los-angeles-ca-do-you-think-there-is-enough-content-for-an-event-dedicated-to-that-area-what-are-your-plans-for-it-">You created one of the <a href="http://www.meetup.com/Web-Components-LA">first Web Components meetups</a> in Los Angeles, CA. Do you think there is enough content for an event dedicated to that area? What are your plans for it?</h3>
<p>I was pretty surprised when I looked and there wasn&#39;t already one in the Bay Area. I guess maybe LA&#39;s just a little bit ahead right now when it comes to tech. ;)</p>
<p>There&#39;s plenty of content, but not always enough people who know the content and want to present it. We&#39;re building a community from scratch so I&#39;ve accepted that I&#39;ll be presenting something almost every month for a while. But for content, there&#39;s a Web Components spin that can be put on any topic pertinent to front-end development in general today. There are hundreds of HTML5, Angular, Ember, etc. meetups, and someday there will be hundreds of Web Components meetups as well!</p>
<p>My plans for the group? First we get people excited about Web Components, then we get them building and sharing reusable elements, then we take over the world! Or just build really cool stuff, that last bit&#39;s still up in the air.</p>
<hr>
<h2 id="credits">Credits</h2>
<ul>
<li>Questions written by <a href="https://twitter.com/zenorocha">Zeno Rocha</a> and <a href="https://twitter.com/rob_dodson">Rob Dodson</a>.</li>
</ul>
]]></description>
            <link>http://webcomponents.org/articles/interview-with-michael-bleigh</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/interview-with-michael-bleigh</guid>
            <pubDate>Mon, 06 Apr 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[webcomponents.js 0.6.0 release]]></title>
            <description><![CDATA[<p>Exciting news - the 0.6.0 version of the <code>webcomponents.js</code> polyfills has been <a href="https://github.com/webcomponents/webcomponentsjs/tree/v0.6.0">released</a>. A lot of critical fixes are in this release - highlights are described below.</p>
<!-- Excerpt -->
<p>This also marks about 6 months since the polyfills were moved from the Polymer organization over to WebComponents.org. Here are some stats comparing the Polymer/platform repository activity in the six months prior to the move (the precursor to webcomponents.js), to the WebComponents/webcomponentsjs repository in the six months since its creation:</p>
<table>
<thead>
<tr>
<th></th>
<th>platform</th>
<th>webcomponentsjs</th>
</tr>
</thead>
<tbody>
<tr>
<td>Contributors</td>
<td>3</td>
<td>26</td>
</tr>
<tr>
<td>Commits</td>
<td>64</td>
<td>155</td>
</tr>
<tr>
<td>Non-Polymer Team Contributors</td>
<td>0</td>
<td>19</td>
</tr>
<tr>
<td>Non-Polymer Team Commits</td>
<td>0</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>A few things you&#39;ll note:</p>
<ul>
<li>Huge increase in activity overall.</li>
<li>Large chunk of commits are now coming from outside the Polymer team.</li>
<li>The Polymer team&#39;s activity on the polyfills has picked up significantly as well.</li>
</ul>
<p>All of these things are great news for the future of the polyfills and the continued growth of Web Components - we couldn&#39;t be more excited.</p>
<p>On to the highlights of 0.6.0:</p>
<ul>
<li>Relative path resolving in CSS <a href="https://github.com/webcomponents/webcomponentsjs/issues/134">is fixed</a>. Previously if a stylesheet referenced a file with a relative path, under the Shadow DOM, the path would not be resolved correctly.  A major shout-out to <a href="https://github.com/nazar-pc">nazar-pc</a>, who created a PR that fixes this.</li>
<li><code>flags.log.split</code> <a href="https://github.com/webcomponents/webcomponentsjs/pull/223">no longer throws an error</a> upon loading webcomponent polyfills.</li>
<li><code>Node.isEqualNode</code> and <code>document.createTreeWalker</code> <a href="https://github.com/webcomponents/webcomponentsjs/pull/227">are now implemented</a>. Thank you to <a href="https://github.com/eeid26">eeid26</a> for writing the implementations of these such that they work under the polyfill.</li>
<li>Patched <code>importNode</code> to work around IE11 bug. This was a major blocker for IE11 support, and <a href="https://github.com/webcomponents/webcomponentsjs/pull/226">is now fixed</a>.</li>
<li>Added <code>nodeValue</code> to cdata. Under the polyfill, the CharacterData prototype didn&#39;t have nodeValue accessors. <a href="https://github.com/webcomponents/webcomponentsjs/pull/225">Now it does</a>.</li>
<li>Fixed the <code>makeScopeMatcher</code> regular expression. Thank you to <a href="https://github.com/vicb">vicb</a> for pointing this out and <a href="https://github.com/webcomponents/webcomponentsjs/pull/205">fixing it</a>!</li>
<li>We&#39;re now actively testing against EdgeHTML in IE - as close to you can get to IE&#39;s new <a href="http://blogs.msdn.com/b/ie/archive/2015/03/18/rendering-engine-updates-in-march-for-the-windows-10-technical-preview.aspx">Spartan rendering engine</a> - and are making sure the changes work fine there too.</li>
<li><a href="https://github.com/webcomponents/webcomponentsjs#known-issues">Known Issues</a> section added to the <code>README</code>. There is a subset of issues that come up with the Polyfills that are just fundamentally unsolvable - usually due to a bug in a browser version, or just the basic inability to truly and completely polyfill the power that is ShadowDOM. A list of Known Issues has been added to the <code>README</code> to document where these sharp edges come up, and how to work around them.</li>
</ul>
<p>We&#39;ll be regularly releasing <code>webcomponents.js</code> as fixes come in - keep the PR&#39;s and issues coming!</p>
]]></description>
            <link>http://webcomponents.org/articles/polyfills-0-6-0</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/polyfills-0-6-0</guid>
            <pubDate>Fri, 27 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A W3C Custom Elements Alternative]]></title>
            <description><![CDATA[<p>ES6 introduced some goodness to JavaScript, and Weak or Set Maps are part of it. However, it is not entirely possible to polyfill these features without risking to be a bit obtrusive and not so backward compatible. When <code>webcomponents.js</code> initially went out, it was lacking support for older browsers and bringing in external arbitrary polyfills that were not playing so well together with few other libraries. On top of that, it was bringing features that if used on Android 2 phones or other cheap devices, where not performing so well and hence not that useful as part of the library.</p>
<p>In order to avoid these little obstacles and brings at least Custom Elements out of the entire Web Components family in older Mobile browsers too, Andrea Giammarchi decided to invest some time and create a <code>document.registerElement</code> only polyfill with the goal of supporting as many mobile platforms as possible, and in a reasonable size over decent performance.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/a-w3c-custom-elements-alternative</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/a-w3c-custom-elements-alternative</guid>
            <pubDate>Fri, 20 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bringing Custom Elements to IE8]]></title>
            <description><![CDATA[<p>Bringing modern Web standards to old browsers is always challenging, sometimes nearly impossible, but always beneficial for a graceful migrations approach.</p>
<p>Before his latest talk in Helsinki, Andrea managed to accomplish something unexpected and relatively simple: he manged to make his Custom Element&#39;s <code>document.registerElement</code> <a href="https://github.com/WebReflection/document-register-element#document-register-element">polyfill</a> compatible with Internet Explorer 8 too, together with the already wide list of old Mobile platforms supported since the very beginning.</p>
<p>As result, when it&#39;s needed, and with a little extra effort, it is now possible to create components that won&#39;t break the old, even if not so good, Web platform.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/bringing-custom-elements-to-ie8</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/bringing-custom-elements-to-ie8</guid>
            <pubDate>Fri, 20 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Bet on Web Components and Ember.Component Synchronicity]]></title>
            <description><![CDATA[<p>The Ember community is no stranger to componentization. The team for this JavaScript framework has
been working hard on the implementation of Ember.Components as well as integrating these seemlessly
with standard Web Components.</p>
<p>The boundaries between Ember.Components and a Web Components are beginning to blur more and more.
Making these two component models work together should be fairly easy.</p>
<!-- Excerpt -->]]></description>
            <link>http://webcomponents.org/articles/a-bet-on-web-components-and-embercomponent-synchronicity</link>
            <guid isPermaLink="true">http://webcomponents.org/articles/a-bet-on-web-components-and-embercomponent-synchronicity</guid>
            <pubDate>Wed, 04 Mar 2015 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>